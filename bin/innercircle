var express = require('express');
var markdown = require('markdown').markdown;
var moment = require('moment');
var nunjucks = require('nunjucks');
var optimist = require('optimist');
var SQLiteStore = require('connect-sqlite3')(express);

var cms = require('../lib/cms');
var doWebmention = require('../lib/do_webmentions');
var mailgun = require('../lib/mailgun');
var webmention = require('../lib/webmention_receive');

argv = optimist.usage('Usage: $0 [--port=3666]')
    .options('p', {
        alias: 'port',
        "default": '3666',
        describe: 'Port to listen on'
    })
    .options('h', {
        alias: 'hostname',
        "default": 'localhost',
        describe: 'Public hostname for this service'
    })
    .options('a', {
        alias: 'audience',
        describe: 'Public base url for this service, overridees protocol, hostname and port'
    })
    .options('protocol', {
        "default": "http",
        describe: 'http or https protocol'
    })
    .options('d', {
        alias: 'data',
        "default": "./data",
        describe: 'Directory to store data files'
    })
    .options('mailgun-api-key', {
        describe: 'Mailgun API Key'
    })
    .options('f', {
        alias: 'from',
        "default": 'Austin King <austin@ozten.mailgun.org>',
        describe: 'From: field'
    })
    .options('t', {
        alias: 'to',
        "default": 'Austin King <shout@ozten.com>',
        describe: 'To: field'
    })
    .options('mailgun-api-url', {
        "default": 'https://api.mailgun.net/v2/ozten.mailgun.org/messages',
        describe: 'Mailgun service url'
    })
    .argv;

cms.setDataDirectory(argv.data);

var app = express();
var env = new nunjucks.Environment(new nunjucks.FileSystemLoader('views'));

env.express(app);

app.use(express.bodyParser());
app.use(express.methodOverride());
app.use(express.cookieParser());
app.use(express.session({
    secret: "keyboard cat",
    store: new SQLiteStore
}));

var audience = argv.protocol + '://' + argv.hostname + ':' + argv.port;
if (!! argv.a) {
    audience = argv.a;
}
app.locals({
    audience: audience
});

app.use(function(req, res, next) {
    if (req.session && req.session.email) {
        app.locals({
            loggedInUser: '"' + req.session.email + '"'
        });
    } else {
        app.locals({
            loggedInUser: 'null'
        });
    }
    next();
});

require("express-persona")(app, {
    audience: audience
});

/* Anonymous Authorized routes */
app.get('/', function(req, res) {
    res.render('homepage.html');
});


app.post('/webmention', function(req, res) {
    console.log('/webmention POSTed');
    console.log(req.body);
    var source = req.body.source;
    var target = req.body.target;
    console.log(source, target);
    if (!source || !target) {
        res.send("Missing source or target", 400);
    }
    // Does the post they are talking about exist?
    // Does their post exist and mention our url?
    //
    webmention(source, target, function(err, comment) {
        if (err) return res.send(err, 400);
        try {
            mailgun([argv.t], {
              s: 'Webmention from ' + source,
              b: ["Wemention here... I did you know that",
                  source,
                  "was discussing",
                  target,
                  "pretty cool, huh?"].join('\n'),
              "mailgun-api-key": argv["mailgun-api-key"],
              f: argv.f,
              "mailgun-api-url": argv["mailgun-api-url"]
            });
        } catch (e) {
           console.log('Error sending webmention notification email');
           console.log(e);
        }
        res.send(comment);
    });
});

app.get('/access_denied', function(req, res) {
    res.render('access_denied.html');
});

var checkAudience = function(audienceCb, req, res, next) {
    if (audienceCb(req.session.email)) {
        next();
    } else {
        res.redirect('/access_denied');
    }
};

var checkOwnership = function(req, res, next) {
    if (!req.session ||
        ['shout@ozten.com', 'eozten@yahoo.com'].indexOf(req.session.email) === -1) {
        res.redirect('/access_denied');
    }
    next();
};

app.get('/editor', checkOwnership, function(req, res) {
    res.render('editor.html', {
        post: {
            slug: null,
            title: null,
            body: null,
            audience: null
        }
    });
});

app.get('/editor/:slug', checkOwnership, function(req, res) {
    cms.loadPost(req.params.slug, function(err, post) {
        if (err) return res.render('error.html', {error: err});
        res.render('editor.html', {
            post: post
        });
    });

});

app.post('/editor', checkOwnership, function(req, res) {
    console.log('POSTED');
    console.log(req.body);
    var data = req.body;
    if (!data.postslug) {
        data.postslug = cms.slugify(data);
    }
    var created = data.createdt || new Date().getTime();
    cms.savePost(data.postslug, data.posttitle,
        data.postbody, data.postaudience, created, function(err) {
        doWebmention(audience + '/' + data.postslug, data.postbody);
        res.redirect('/editor/' + data.postslug);
    });
});

app.use(express.static('static'));

// Deafult route, catches all other traffic
app.get('/:slug', function(req, res) {
    //Link: <http://news.indiewebcamp.com/webmention>; rel="http://webmention.org/"
    // <link href="{{ audience }}/webmention" rel="http://webmention.org/" />
    res.setHeader('Link', '<' + audience + '/webmention>; rel="http://webmention.org/"');
    checkAudience(function(email) {
        console.log('check audience callback with email=' + email);
        return true;
    }, req, res, function() {
        cms.loadPost(req.params.slug, function(err, post) {
            if (err) {
                return res.render('error.html', {error: err});
            }
            post.body = markdown.toHTML(post.body);
            console.log(post.body);
            post.published = new Date(post.createdt).toISOString();
            post.humanePublished = moment(post.createdt).calendar();

            post.updated = new Date(post.updatedt).toISOString();
            post.humaneUpdated = moment(post.updatedt).calendar();
            res.render('post.html', {
                post: post
            });

        });
    });
});

app.listen(argv.port);
console.log("You're InnerCircle is at ", audience);